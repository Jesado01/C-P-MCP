{
  "sessionId": 1761164147012,
  "timestamp": "2025-10-22T20:18:40.393Z",
  "history": [
    {
      "role": "user",
      "content": "Abre https://www.saucedemo.com y genera casos de prueba"
    },
    {
      "role": "assistant",
      "content": "Voy a generar casos de prueba completos para el sitio de SauceDemo. He analizado la aplicación y he creado pruebas que cubren los flujos principales de usuario.\n\n```typescript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('SauceDemo - Suite de Pruebas Completa', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    await page.goto('https://www.saucedemo.com');\n  });\n\n  test('Verificar elementos de la página de login', async ({ page }) => {\n    // Verificar que los elementos principales estén presentes\n    await expect(page.locator('[data-test=\"username\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"password\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"login-button\"]')).toBeVisible();\n    await expect(page.locator('.login_logo')).toContainText('Swag Labs');\n    \n    // Verificar usuarios disponibles\n    await expect(page.locator('#login_credentials')).toContainText('standard_user');\n    await expect(page.locator('#login_credentials')).toContainText('locked_out_user');\n    await expect(page.locator('#login_credentials')).toContainText('problem_user');\n  });\n\n  test('Login exitoso con credenciales válidas', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar redirección exitosa\n    await expect(page).toHaveURL(/.*inventory.html/);\n    await expect(page.locator('.title')).toContainText('Products');\n    await expect(page.locator('.shopping_cart_link')).toBeVisible();\n    await expect(page.locator('.bm-burger-button')).toBeVisible();\n  });\n\n  test('Login fallido con credenciales inválidas', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'usuario_invalido');\n    await page.fill('[data-test=\"password\"]', 'contraseña_invalida');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar mensaje de error\n    await expect(page.locator('[data-test=\"error\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username and password do not match any user in this service');\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n  });\n\n  test('Login con usuario bloqueado', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'locked_out_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar mensaje específico para usuario bloqueado\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Sorry, this user has been locked out');\n  });\n\n  test('Validación de campos obligatorios', async ({ page }) => {\n    // Intentar login sin usuario ni contraseña\n    await page.click('[data-test=\"login-button\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username is required');\n\n    // Limpiar error y probar solo con usuario\n    await page.click('[data-test=\"error-button\"]');\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.click('[data-test=\"login-button\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Password is required');\n  });\n\n  test('Navegación y visualización de productos', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar productos visibles\n    await expect(page.locator('.inventory_item')).toHaveCount(6);\n    \n    // Verificar elementos de cada producto\n    const firstProduct = page.locator('.inventory_item').first();\n    await expect(firstProduct.locator('.inventory_item_name')).toBeVisible();\n    await expect(firstProduct.locator('.inventory_item_desc')).toBeVisible();\n    await expect(firstProduct.locator('.inventory_item_price')).toBeVisible();\n    await expect(firstProduct.locator('.btn_inventory')).toBeVisible();\n  });\n\n  test('Funcionalidad del carrito de compras', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Agregar primer producto al carrito\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    \n    // Verificar que el botón cambió\n    await expect(page.locator('[data-test=\"remove-sauce-labs-backpack\"]')).toBeVisible();\n    \n    // Verificar contador del carrito\n    await expect(page.locator('.shopping_cart_badge')).toContainText('1');\n\n    // Ir al carrito\n    await page.click('.shopping_cart_link');\n    await expect(page).toHaveURL(/.*cart.html/);\n    await expect(page.locator('.cart_item')).toHaveCount(1);\n  });\n\n  test('Proceso completo de compra', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Agregar productos al carrito\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('[data-test=\"add-to-cart-sauce-labs-bike-light\"]');\n\n    // Ir al carrito\n    await page.click('.shopping_cart_link');\n    \n    // Proceder al checkout\n    await page.click('[data-test=\"checkout\"]');\n    await expect(page).toHaveURL(/.*checkout-step-one.html/);\n\n    // Llenar información del checkout\n    await page.fill('[data-test=\"firstName\"]', 'Juan');\n    await page.fill('[data-test=\"lastName\"]', 'Pérez');\n    await page.fill('[data-test=\"postalCode\"]', '12345');\n    await page.click('[data-test=\"continue\"]');\n\n    // Verificar página de resumen\n    await expect(page).toHaveURL(/.*checkout-step-two.html/);\n    await expect(page.locator('.summary_info')).toBeVisible();\n    \n    // Finalizar compra\n    await page.click('[data-test=\"finish\"]');\n    \n    // Verificar confirmación\n    await expect(page).toHaveURL(/.*checkout-complete.html/);\n    await expect(page.locator('.complete-header')).toContainText('Thank you for your order!');\n  });\n\n  test('Funcionalidad de ordenamiento de productos', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Probar ordenamiento por precio (bajo a alto)\n    await page.selectOption('[data-test=\"product_sort_container\"]', 'lohi');\n    \n    // Obtener precios y verificar orden\n    const prices = await page.locator('.inventory_item_price').allTextContents();\n    const numericPrices = prices.map(price => parseFloat(price.replace('$', '')));\n    \n    for (let i = 1; i < numericPrices.length; i++) {\n      expect(numericPrices[i]).toBeGreaterThanOrEqual(numericPrices[i - 1]);\n    }\n  });\n\n  test('Menú hamburguesa y logout', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Abrir menú hamburguesa\n    await page.click('.bm-burger-button');\n    \n    // Verificar opciones del menú\n    await expect(page.locator('#inventory_sidebar_link')).toBeVisible();\n    await expect(page.locator('#about_sidebar_link')).toBeVisible();\n    await expect(page.locator('#logout_sidebar_link')).toBeVisible();\n    await expect(page.locator('#reset_sidebar_link')).toBeVisible();\n\n    // Hacer logout\n    await page.click('#logout_sidebar_link');\n    \n    // Verificar redirección a login\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n    await expect(page.locator('[data-test=\"login-button\"]')).toBeVisible();\n  });\n\n  test('Visualización de detalles del producto', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Click en el nombre del primer producto\n    await page.click('.inventory_item_name >> nth=0');\n    \n    // Verificar página de detalles\n    await expect(page).toHaveURL(/.*inventory-item.html/);\n    await expect(page.locator('.inventory_details_name')).toBeVisible();\n    await expect(page.locator('.inventory_details_desc')).toBeVisible();\n    await expect(page.locator('.inventory_details_price')).toBeVisible();\n    await expect(page.locator('.inventory_details_img')).toBeVisible();\n    \n    // Verificar botón de regreso\n    await expect(page.locator('[data-test=\"back-to-products\"]')).toBeVisible();\n    \n    // Regresar a productos\n    await page.click('[data-test=\"back-to-products\"]');\n    await expect(page).toHaveURL(/.*inventory.html/);\n  });\n\n  test('Usuario con problemas de rendimiento', async ({ page }) => {\n    // Login con problem_user\n    await page.fill('[data-test=\"username\"]', 'problem_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar que el login fue exitoso pero puede haber problemas visuales\n    await expect(page).toHaveURL(/.*inventory.html/);\n    await expect(page.locator('.title')).toContainText('Products');\n    \n    // Este usuario puede tener imágenes rotas o problemas de carga\n    const images = page.locator('.inventory_item_img img');\n    await expect(images.first()).toBeVisible();\n  });\n});\n```\n\nGUARDAR_CODIGO:saucedemo-tests.spec.ts"
    },
    {
      "role": "user",
      "content": "Abre https://www.saucedemo.com y genera casos de prueba"
    },
    {
      "role": "assistant",
      "content": "Voy a generar casos de prueba completos para el sitio SauceDemo, cubriendo todos los flujos principales y casos edge.\n\n```typescript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('SauceDemo - Pruebas E2E Completas', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    await page.goto('https://www.saucedemo.com');\n  });\n\n  test('Verificar elementos de la página de login están presentes', async ({ page }) => {\n    // Verificar título de la aplicación\n    await expect(page.locator('.login_logo')).toContainText('Swag Labs');\n    \n    // Verificar campos de entrada\n    await expect(page.locator('[data-test=\"username\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"password\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"login-button\"]')).toBeVisible();\n    \n    // Verificar información de usuarios de prueba\n    await expect(page.locator('#login_credentials')).toContainText('Accepted usernames are:');\n    await expect(page.locator('.login_password')).toContainText('Password for all users:');\n    await expect(page.locator('.login_password')).toContainText('secret_sauce');\n  });\n\n  test('Login exitoso con usuario estándar', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar redirección exitosa\n    await expect(page).toHaveURL(/.*inventory\\.html/);\n    await expect(page.locator('.title')).toHaveText('Products');\n    await expect(page.locator('.shopping_cart_link')).toBeVisible();\n    await expect(page.locator('.bm-burger-button')).toBeVisible();\n    \n    // Verificar que hay productos disponibles\n    await expect(page.locator('.inventory_item')).toHaveCount(6);\n  });\n\n  test('Login fallido - credenciales incorrectas', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'usuario_incorrecto');\n    await page.fill('[data-test=\"password\"]', 'password_incorrecto');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar mensaje de error\n    await expect(page.locator('[data-test=\"error\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username and password do not match');\n    \n    // Verificar que permanece en la página de login\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n    \n    // Verificar botón para cerrar error\n    await expect(page.locator('[data-test=\"error-button\"]')).toBeVisible();\n  });\n\n  test('Login fallido - usuario bloqueado', async ({ page }) => {\n    await page.fill('[data-test=\"username\"]', 'locked_out_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar mensaje específico de usuario bloqueado\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Sorry, this user has been locked out');\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n  });\n\n  test('Validación de campos requeridos', async ({ page }) => {\n    // Intentar login sin completar campos\n    await page.click('[data-test=\"login-button\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username is required');\n\n    // Limpiar error y completar solo username\n    await page.click('[data-test=\"error-button\"]');\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.click('[data-test=\"login-button\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Password is required');\n  });\n\n  test('Agregar productos al carrito de compras', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Agregar primer producto\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    \n    // Verificar que el botón cambió a \"Remove\"\n    await expect(page.locator('[data-test=\"remove-sauce-labs-backpack\"]')).toBeVisible();\n    \n    // Verificar badge del carrito\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('1');\n\n    // Agregar segundo producto\n    await page.click('[data-test=\"add-to-cart-sauce-labs-bike-light\"]');\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('2');\n\n    // Remover un producto\n    await page.click('[data-test=\"remove-sauce-labs-backpack\"]');\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('1');\n  });\n\n  test('Visualizar carrito de compras', async ({ page }) => {\n    // Login y agregar productos\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n    \n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('[data-test=\"add-to-cart-sauce-labs-fleece-jacket\"]');\n\n    // Ir al carrito\n    await page.click('.shopping_cart_link');\n    \n    // Verificar URL y contenido del carrito\n    await expect(page).toHaveURL(/.*cart\\.html/);\n    await expect(page.locator('.title')).toHaveText('Your Cart');\n    await expect(page.locator('.cart_item')).toHaveCount(2);\n    \n    // Verificar botones de acción\n    await expect(page.locator('[data-test=\"continue-shopping\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"checkout\"]')).toBeVisible();\n  });\n\n  test('Proceso completo de checkout', async ({ page }) => {\n    // Login y agregar producto\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n    \n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('.shopping_cart_link');\n\n    // Iniciar checkout\n    await page.click('[data-test=\"checkout\"]');\n    await expect(page).toHaveURL(/.*checkout-step-one\\.html/);\n\n    // Completar información personal\n    await page.fill('[data-test=\"firstName\"]', 'Juan');\n    await page.fill('[data-test=\"lastName\"]', 'Pérez');\n    await page.fill('[data-test=\"postalCode\"]', '12345');\n    await page.click('[data-test=\"continue\"]');\n\n    // Verificar página de resumen\n    await expect(page).toHaveURL(/.*checkout-step-two\\.html/);\n    await expect(page.locator('.title')).toHaveText('Checkout: Overview');\n    \n    // Verificar información del producto\n    await expect(page.locator('.cart_item')).toBeVisible();\n    await expect(page.locator('.summary_subtotal_label')).toBeVisible();\n    await expect(page.locator('.summary_tax_label')).toBeVisible();\n    await expect(page.locator('.summary_total_label')).toBeVisible();\n\n    // Finalizar compra\n    await page.click('[data-test=\"finish\"]');\n    \n    // Verificar página de confirmación\n    await expect(page).toHaveURL(/.*checkout-complete\\.html/);\n    await expect(page.locator('.complete-header')).toHaveText('Thank you for your order!');\n    await expect(page.locator('[data-test=\"back-to-products\"]')).toBeVisible();\n  });\n\n  test('Validación de campos requeridos en checkout', async ({ page }) => {\n    // Setup\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('.shopping_cart_link');\n    await page.click('[data-test=\"checkout\"]');\n\n    // Intentar continuar sin completar campos\n    await page.click('[data-test=\"continue\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('First Name is required');\n\n    // Completar solo primer nombre\n    await page.click('[data-test=\"error-button\"]');\n    await page.fill('[data-test=\"firstName\"]', 'Juan');\n    await page.click('[data-test=\"continue\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Last Name is required');\n\n    // Completar primer y segundo nombre\n    await page.click('[data-test=\"error-button\"]');\n    await page.fill('[data-test=\"lastName\"]', 'Pérez');\n    await page.click('[data-test=\"continue\"]');\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Postal Code is required');\n  });\n\n  test('Funcionalidad de ordenamiento de productos', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Verificar ordenamiento por defecto (A-Z)\n    const defaultOrder = await page.locator('.inventory_item_name').allTextContents();\n    \n    // Ordenar por precio (bajo a alto)\n    await page.selectOption('[data-test=\"product_sort_container\"]', 'lohi');\n    \n    // Obtener precios y verificar orden ascendente\n    const prices = await page.locator('.inventory_item_price').allTextContents();\n    const numericPrices = prices.map(price => parseFloat(price.replace('$', '')));\n    \n    for (let i = 1; i < numericPrices.length; i++) {\n      expect(numericPrices[i]).toBeGreaterThanOrEqual(numericPrices[i - 1]);\n    }\n\n    // Ordenar por precio (alto a bajo)\n    await page.selectOption('[data-test=\"product_sort_container\"]', 'hilo');\n    const pricesDesc = await page.locator('.inventory_item_price').allTextContents();\n    const numericPricesDesc = pricesDesc.map(price => parseFloat(price.replace('$', '')));\n    \n    for (let i = 1; i < numericPricesDesc.length; i++) {\n      expect(numericPricesDesc[i]).toBeLessThanOrEqual(numericPricesDesc[i - 1]);\n    }\n  });\n\n  test('Detalles del producto', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Click en imagen del producto\n    await page.click('.inventory_item_img >> nth=0');\n    \n    // Verificar página de detalles\n    await expect(page).toHaveURL(/.*inventory-item\\.html/);\n    await expect(page.locator('.inventory_details_name')).toBeVisible();\n    await expect(page.locator('.inventory_details_desc')).toBeVisible();\n    await expect(page.locator('.inventory_details_price')).toBeVisible();\n    await expect(page.locator('.inventory_details_img')).toBeVisible();\n    \n    // Verificar botones de acción\n    await expect(page.locator('[data-test=\"add-to-cart\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"back-to-products\"]')).toBeVisible();\n\n    // Agregar al carrito desde detalles\n    await page.click('[data-test=\"add-to-cart\"]');\n    await expect(page.locator('[data-test=\"remove\"]')).toBeVisible();\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('1');\n\n    // Regresar a productos\n    await page.click('[data-test=\"back-to-products\"]');\n    await expect(page).toHaveURL(/.*inventory\\.html/);\n  });\n\n  test('Menú lateral y logout', async ({ page }) => {\n    // Login\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // Abrir menú hamburguesa\n    await page.click('.bm-burger-button');\n    \n    // Esperar a que se abra el menú\n    await expect(page.locator('.bm-menu')).toBeVisible();\n    \n    // Verificar opciones del menú\n    await expect(page.locator('#inventory_sidebar_link')).toHaveText('All Items');\n    await expect(page.locator('#about_sidebar_link')).toHaveText('About');\n    await expect(page.locator('#logout_sidebar_link')).toHaveText('Logout');\n    await expect(page.locator('#reset_sidebar_link')).toHaveText('Reset App State');\n\n    // Realizar logout\n    await page.click('#logout_sidebar_link');\n    \n    // Verificar redirección a login\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n    await expect(page.locator('[data-test=\"login-button\"]')).toBeVisible();\n  });\n\n  test('Reset del estado de la aplicación', async ({ page }) => {\n    // Login y agregar productos\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n    \n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('[data-test=\"add-to-cart-sauce-labs-bike-light\"]');\n    \n    // Verificar productos en carrito\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('2');\n\n    // Abrir menú y resetear\n    await page.click('.bm-burger-button');\n    await page.click('#reset_sidebar_link');\n    \n    // Cerrar menú\n    await page.click('.bm-cross-button');\n    \n    // Verificar que el carrito se vació\n    await expect(page.locator('.shopping_cart_badge')).not.toBeVisible();\n    \n    // Verificar que los botones volvieron a \"Add to cart\"\n    await expect(page.locator('[data-test=\"add-to-cart-sauce-labs-backpack\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"add-to-cart-sauce-labs-bike-light\"]')).toBeVisible();\n  });\n\n  test('Usuario con problemas visuales (problem_user)', async ({ page }) => {\n    // Login con problem_user\n    await page.fill('[data-test=\"username\"]', 'problem_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n\n    // El login debe ser exitoso\n    await expect(page).toHaveURL(/.*inventory\\.html/);\n    await expect(page.locator('.title')).toHaveText('Products');\n    \n    // Verificar que los productos están presentes (aunque pueden tener problemas visuales)\n    await expect(page.locator('.inventory_item')).toHaveCount(6);\n    \n    // Intentar agregar producto (puede fallar con este usuario)\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    \n    // Este usuario puede tener comportamientos inesperados\n    const cartBadge = page.locator('.shopping_cart_badge');\n    if (await cartBadge.isVisible()) {\n      await expect(cartBadge).toHaveText('1');\n    }\n  });\n\n  test('Usuario de rendimiento (performance_glitch_user)', async ({ page }) => {\n    // Login con performance_glitch_user\n    await page.fill('[data-test=\"username\"]', 'performance_glitch_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    \n    // El login puede tardar más con este usuario\n    await page.click('[data-test=\"login-button\"]');\n    \n    // Esperar más tiempo para la carga\n    await expect(page).toHaveURL(/.*inventory\\.html/, { timeout: 10000 });\n    await expect(page.locator('.title')).toHaveText('Products');\n    \n    // Las acciones pueden ser más lentas\n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('1', { timeout: 5000 });\n  });\n\n  test('Navegación \"Continue Shopping\" desde carrito', async ({ page }) => {\n    // Setup\n    await page.fill('[data-test=\"username\"]', 'standard_user');\n    await page.fill('[data-test=\"password\"]', 'secret_sauce');\n    await page.click('[data-test=\"login-button\"]');\n    \n    await page.click('[data-test=\"add-to-cart-sauce-labs-backpack\"]');\n    await page.click('.shopping_cart_link');\n\n    // Continuar comprando\n    await page.click('[data-test=\"continue-shopping\"]');\n    \n    // Verificar regreso a inventario\n    await expect(page).toHaveURL(/.*inventory\\.html/);\n    await expect(page.locator('.title')).toHaveText('Products');\n    await expect(page.locator('.shopping_cart_badge')).toHaveText('1');\n  });\n});\n```\n\nGUARDAR_CODIGO:saucedemo-complete-tests.spec.ts"
    }
  ]
}
