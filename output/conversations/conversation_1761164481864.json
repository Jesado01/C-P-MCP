{
  "sessionId": 1761164481864,
  "timestamp": "2025-10-22T20:22:05.926Z",
  "history": [
    {
      "role": "user",
      "content": "Abre https://www.saucedemo.com y genera casos de prueba"
    },
    {
      "role": "assistant",
      "content": "Te ayudo a generar casos de prueba para el sitio web de SauceDemo. Primero voy a explorar la página y luego crear casos de prueba completos.\n\nAquí están los casos de prueba para SauceDemo:\n\n```typescript\nimport { test, expect } from '@playwright/test';\n\ntest.describe('SauceDemo - Casos de Prueba', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    await page.goto('https://www.saucedemo.com/');\n  });\n\n  test('Verificar elementos de la página de login', async ({ page }) => {\n    // Verificar que la página carga correctamente\n    await expect(page).toHaveTitle('Swag Labs');\n    \n    // Verificar elementos del formulario de login\n    await expect(page.locator('#user-name')).toBeVisible();\n    await expect(page.locator('#password')).toBeVisible();\n    await expect(page.locator('#login-button')).toBeVisible();\n    \n    // Verificar placeholders\n    await expect(page.locator('#user-name')).toHaveAttribute('placeholder', 'Username');\n    await expect(page.locator('#password')).toHaveAttribute('placeholder', 'Password');\n  });\n\n  test('Login exitoso con usuario estándar', async ({ page }) => {\n    // Realizar login con credenciales válidas\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Verificar que el login fue exitoso\n    await expect(page).toHaveURL('https://www.saucedemo.com/inventory.html');\n    await expect(page.locator('.title')).toContainText('Products');\n    await expect(page.locator('.shopping_cart_link')).toBeVisible();\n  });\n\n  test('Login fallido con credenciales incorrectas', async ({ page }) => {\n    // Intentar login con credenciales incorrectas\n    await page.fill('#user-name', 'usuario_incorrecto');\n    await page.fill('#password', 'password_incorrecta');\n    await page.click('#login-button');\n    \n    // Verificar mensaje de error\n    await expect(page.locator('[data-test=\"error\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username and password do not match');\n  });\n\n  test('Login fallido con campos vacíos', async ({ page }) => {\n    // Hacer clic en login sin llenar campos\n    await page.click('#login-button');\n    \n    // Verificar mensaje de error\n    await expect(page.locator('[data-test=\"error\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Username is required');\n  });\n\n  test('Login con usuario bloqueado', async ({ page }) => {\n    // Intentar login con usuario bloqueado\n    await page.fill('#user-name', 'locked_out_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Verificar mensaje de error\n    await expect(page.locator('[data-test=\"error\"]')).toBeVisible();\n    await expect(page.locator('[data-test=\"error\"]')).toContainText('Sorry, this user has been locked out');\n  });\n\n  test('Navegación y funcionalidad del inventario', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Verificar que hay productos en el inventario\n    await expect(page.locator('.inventory_item')).toHaveCount(6);\n    \n    // Verificar filtros de ordenamiento\n    await expect(page.locator('.product_sort_container')).toBeVisible();\n    \n    // Probar ordenamiento por precio (bajo a alto)\n    await page.selectOption('.product_sort_container', 'lohi');\n    \n    // Verificar que el primer producto es el más barato\n    const firstProductPrice = await page.locator('.inventory_item:first-child .inventory_item_price').textContent();\n    expect(firstProductPrice).toContain('$7.99');\n  });\n\n  test('Agregar producto al carrito', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Agregar primer producto al carrito\n    await page.click('.inventory_item:first-child .btn_inventory');\n    \n    // Verificar que el contador del carrito se actualiza\n    await expect(page.locator('.shopping_cart_badge')).toContainText('1');\n    \n    // Verificar que el botón cambió a \"Remove\"\n    await expect(page.locator('.inventory_item:first-child .btn_inventory')).toContainText('Remove');\n  });\n\n  test('Ver detalles del producto', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Hacer clic en el nombre del primer producto\n    await page.click('.inventory_item:first-child .inventory_item_name');\n    \n    // Verificar que estamos en la página de detalles\n    await expect(page).toHaveURL(/.*inventory-item.html/);\n    await expect(page.locator('.inventory_details_name')).toBeVisible();\n    await expect(page.locator('.inventory_details_price')).toBeVisible();\n    await expect(page.locator('.btn_inventory')).toBeVisible();\n  });\n\n  test('Proceso completo de compra', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Agregar productos al carrito\n    await page.click('.inventory_item:first-child .btn_inventory');\n    await page.click('.inventory_item:nth-child(2) .btn_inventory');\n    \n    // Ir al carrito\n    await page.click('.shopping_cart_link');\n    await expect(page).toHaveURL('https://www.saucedemo.com/cart.html');\n    \n    // Verificar productos en el carrito\n    await expect(page.locator('.cart_item')).toHaveCount(2);\n    \n    // Proceder al checkout\n    await page.click('#checkout');\n    await expect(page).toHaveURL('https://www.saucedemo.com/checkout-step-one.html');\n    \n    // Llenar información del checkout\n    await page.fill('#first-name', 'Juan');\n    await page.fill('#last-name', 'Pérez');\n    await page.fill('#postal-code', '12345');\n    await page.click('#continue');\n    \n    // Verificar página de resumen\n    await expect(page).toHaveURL('https://www.saucedemo.com/checkout-step-two.html');\n    await expect(page.locator('.summary_info')).toBeVisible();\n    \n    // Finalizar compra\n    await page.click('#finish');\n    await expect(page).toHaveURL('https://www.saucedemo.com/checkout-complete.html');\n    await expect(page.locator('.complete-header')).toContainText('Thank you for your order!');\n  });\n\n  test('Logout exitoso', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Abrir menú hamburguesa\n    await page.click('#react-burger-menu-btn');\n    \n    // Hacer logout\n    await page.click('#logout_sidebar_link');\n    \n    // Verificar que regresamos a la página de login\n    await expect(page).toHaveURL('https://www.saucedemo.com/');\n    await expect(page.locator('#login-button')).toBeVisible();\n  });\n\n  test('Remover producto del carrito', async ({ page }) => {\n    // Login exitoso\n    await page.fill('#user-name', 'standard_user');\n    await page.fill('#password', 'secret_sauce');\n    await page.click('#login-button');\n    \n    // Agregar producto al carrito\n    await page.click('.inventory_item:first-child .btn_inventory');\n    await expect(page.locator('.shopping_cart_badge')).toContainText('1');\n    \n    // Remover producto del carrito\n    await page.click('.inventory_item:first-child .btn_inventory');\n    \n    // Verificar que el contador desaparece\n    await expect(page.locator('.shopping_cart_badge')).not.toBeVisible();\n    \n    // Verificar que el botón vuelve a \"Add to cart\"\n    await expect(page.locator('.inventory_item:first-child .btn_inventory')).toContainText('Add to cart');\n  });\n\n});\n```\n\nGUARDAR_CODIGO:saucedemo-tests.spec.ts"
    }
  ]
}
